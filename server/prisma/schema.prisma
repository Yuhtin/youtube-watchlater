generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(uuid())
  username            String       @unique
  password            String
  imageUrl            String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  cards               Card[]
  playlists           Playlist[]
  sentSuggestions     Suggestion[] @relation("SentSuggestions")
  receivedSuggestions Suggestion[] @relation("ReceivedSuggestions")
}

model Playlist {
  id              String   @id
  title           String
  userId          String
  thumbnailUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  durationSeconds Int?

  user  User   @relation(fields: [userId], references: [id])
  cards Card[]

  @@map("playlists")
}

model Card {
  id              String     @id @default(uuid())
  videoId         String
  title           String
  url             String
  thumbnailUrl    String
  status          ColumnType @default(WATCH_LATER)
  order           Int        @default(0)
  userId          String
  playlistId      String?
  durationSeconds Int?
  addedAt         DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  playlist Playlist? @relation(fields: [playlistId], references: [id])

  @@unique([videoId, userId])
  @@map("cards")
}

model Suggestion {
  id             String   @id @default(uuid())
  fromUser       User     @relation("SentSuggestions", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId     String
  toUser         User     @relation("ReceivedSuggestions", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId       String
  videoId        String
  videoTitle     String
  videoThumbnail String
  videoDuration  Int?
  note           String?
  read           Boolean  @default(false)
  accepted       Boolean?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
}

enum ColumnType {
  WATCH_LATER
  WATCHING
  WATCHED
}
